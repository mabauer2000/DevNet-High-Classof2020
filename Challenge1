"""DevNet High - Class of 2020 - Challenge 1"""

import random
import ipaddress

# ===========================================================================
# TODO: Write a print statement that displays both the type and value of 'ip'
# ===========================================================================
ip = "10.1.1.200"
print(f'IP address is {ip}, and type of variable ip is {type(ip)}')

# ======================================================================================
# TODO: Write a conditional to print out if `iosversion` is less than or greater than 14
# ======================================================================================

i = random.randint(12, 17)

if i>= 14:
    print(f'{i} is greater than or equal to 14!')
else:
    print(f'{i} is less than 14')
    
# =====================================================================
# TODO: Write a conditional that prints the serial number of the device
# =====================================================================
devices = ({'CAT9300':'XVNM1245ERGC'}, {'ISR4331':'VNMM8742THBX'}, {'NGFW2120':'EAQP4900RTJO'})

# RANDOMIZE TUPLE OF DICTIONARIES devices, AND CREATE A LIST WITH A DICTIONARY INSIDE. 
device = random.sample(devices,1 )
print (device)
# WITH [0] WE SELECTED FIRST AND UNIQUE ITEM OF THE LIST WHO IS THE PROPER DICTIONARY.
device = random.sample(devices,1 )[0]
print (device)

print ('------- Long Version -----------')

for item in devices: 
    for key, value in item.items():       
        for key2 in device:          
            if key == key2:
                print (f'Serial number required for the product {key2} is {value}')
                break
 
print ('------- Short Version ----------')

device2 = list(device.items())[0]
print (f'Serial number required for the product {device2[0]} is {device2[1]}')

# ==============================================================================
# Function for converting CIDR notation into 32-bit netmask (nothing to do here)
# ==============================================================================
def cidr_to_netmask(ip_str):
    ip = ipaddress.IPv4Network(ip_str)
    return ip.with_netmask
